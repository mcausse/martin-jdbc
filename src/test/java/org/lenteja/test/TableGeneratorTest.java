package org.lenteja.test;

import java.sql.Timestamp;

import org.hsqldb.jdbc.JDBCDataSource;
import org.junit.Before;
import org.junit.Test;
import org.lenteja.jdbc.DataAccesFacade;
import org.lenteja.jdbc.JdbcDataAccesFacade;
import org.lenteja.jdbc.script.SqlScriptExecutor;
import org.lenteja.mapper.Column;
import org.lenteja.mapper.Table;
import org.lenteja.mapper.TableGenerator;
import org.lenteja.mapper.autogen.impl.HsqldbIdentity;

public class TableGeneratorTest {

    final DataAccesFacade facade;

    public TableGeneratorTest() {
        final JDBCDataSource ds = new JDBCDataSource();
        ds.setUrl("jdbc:hsqldb:mem:a");
        ds.setUser("sa");
        ds.setPassword("");
        this.facade = new JdbcDataAccesFacade(ds);
    }

    @Before
    public void before() {
        facade.begin();
        try {
            SqlScriptExecutor sql = new SqlScriptExecutor(facade);
            sql.runFromClasspath("films.sql");
            facade.commit();
        } catch (Throwable e) {
            facade.rollback();
            throw e;
        }
    }

    @Test
    public void testName() throws Exception {
        TableGenerator g = new TableGenerator(facade);
        System.out.println(g.generate("Pizza", "pizzas"));
        System.out.println(g.generate("Person", "persons"));
        System.out.println(g.generate("Dog", "dogs"));
    }

    public class PersonTable extends Table<Person> {

        public final Column<Person, Integer> idPerson = addPkColumn(Integer.class, "idPerson", "ID_PERSON");
        public final Column<Person, String> dni = addColumn(String.class, "dni", "DNI");
        public final Column<Person, String> name = addColumn(String.class, "name", "NAME");
        public final Column<Person, Integer> age = addColumn(Integer.class, "age", "AGE");
        public final Column<Person, Timestamp> birthDate = addColumn(Timestamp.class, "birthDate", "BIRTH_DATE");

        public PersonTable() {
            super("PERSONS");
            addAutoGenerated(new HsqldbIdentity<>(idPerson));
        }
    }

    public class DogTable extends Table<Dog> {

        public final Column<Dog, Integer> idDog = addPkColumn(Integer.class, "idDog", "ID_DOG");
        public final Column<Dog, String> name = addColumn(String.class, "name", "NAME");
        public final Column<Dog, Boolean> isAlive = addColumn(Boolean.class, "isAlive", "IS_ALIVE");
        public final Column<Dog, String> sex = addColumn(String.class, "sex", "SEX");
        public final Column<Dog, Integer> idJefe = addColumn(Integer.class, "idJefe", "ID_JEFE");

        public DogTable() {
            super("DOGS");
            addAutoGenerated(new HsqldbIdentity<>(idDog));
        }
    }

}
