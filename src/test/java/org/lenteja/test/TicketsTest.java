package org.lenteja.test;

import java.util.Date;

import org.hsqldb.jdbc.JDBCDataSource;
import org.junit.Before;
import org.junit.Test;
import org.lenteja.jdbc.DataAccesFacade;
import org.lenteja.jdbc.JdbcDataAccesFacade;
import org.lenteja.jdbc.script.SqlScriptExecutor;
import org.lenteja.mapper.Column;
import org.lenteja.mapper.GenericDao;
import org.lenteja.mapper.Table;
import org.lenteja.mapper.TableGenerator;
import org.lenteja.mapper.autogen.impl.HsqldbIdentity;

public class TicketsTest {

    final DataAccesFacade facade;

    public TicketsTest() {
        final JDBCDataSource ds = new JDBCDataSource();
        ds.setUrl("jdbc:hsqldb:mem:a");
        ds.setUser("sa");
        ds.setPassword("");
        this.facade = new JdbcDataAccesFacade(ds);
    }

    @Before
    public void before() {
        facade.begin();
        try {
            SqlScriptExecutor sql = new SqlScriptExecutor(facade);
            sql.runFromClasspath("tickets.sql");
            facade.commit();
        } catch (Exception e) {
            facade.rollback();
            throw e;
        }
    }

    @Test
    public void testName() throws Exception {
        TableGenerator g = new TableGenerator(facade);
        System.out.println(g.generate("Ticket", "tickets"));
        System.out.println(g.generate("User", "users"));
        System.out.println(g.generate("TicketUser", "ticket_user"));
        System.out.println(g.generate("TicketMsg", "ticket_msg"));
        System.out.println(g.generate("StateTrans", "state_trans"));
    }

    @Test
    public void test() throws Exception {

        facade.begin();
        try {

            TicketDao ticketDao = new TicketDao(facade);

            Ticket t1 = new Ticket();
            t1.title = "no funka re";
            t1.created = new Date(0L);

            ticketDao.store(t1);

            facade.commit();
        } catch (Throwable e) {
            facade.rollback();
            throw e;
        }
    }

    public static interface Service {

    }

    public static class ServiceImpl implements Service {

        final TicketDao ticketDao;

        public ServiceImpl(DataAccesFacade facade) {
            super();
            ticketDao = new TicketDao(facade);
        }

    }

    // TODO i fer un generador Table => entity+dao

    public static class TicketDao extends GenericDao<Ticket, Integer> {

        public static final TicketTable TABLE = new TicketTable();

        // TODO ManyToMany => User
        // final ManyToMany<Ticket,TicketUser, User> users=new ManyToMany;

        public TicketDao(DataAccesFacade facade) {
            super(facade, TABLE);
        }
    }

    public static class TicketTable extends Table<Ticket> {

        public final Column<Ticket, Integer> idTicket = addPkColumn(Integer.class, "idTicket", "ID_TICK");
        public final Column<Ticket, String> title = addColumn(String.class, "title", "TITLE");
        public final Column<Ticket, Date> created = addColumn(Date.class, "created", "CREATED");

        public TicketTable(String alias) {
            super("TICKETS", alias);
            addAutoGenerated(new HsqldbIdentity<>(idTicket));
        }

        public TicketTable() {
            this(null);
        }
    }

    public static class UserTable extends Table<User> {

        public final Column<User, Integer> idUser = addPkColumn(Integer.class, "idUser", "ID_USER");
        public final Column<User, String> email = addColumn(String.class, "email", "EMAIL");

        public UserTable(String alias) {
            super("USERS", alias);
            addAutoGenerated(new HsqldbIdentity<>(idUser));
        }

        public UserTable() {
            this(null);
        }
    }

    public static class TicketUserTable extends Table<TicketUser> {

        public final Column<TicketUser, Integer> idTicket = addPkColumn(Integer.class, "ticketUserId.idTicket",
                "ID_TICK");
        public final Column<TicketUser, Integer> idUser = addPkColumn(Integer.class, "ticketUserId.idUser", "ID_USER");

        public TicketUserTable(String alias) {
            super("TICKET_USER", alias);
            addAutoGenerated(new HsqldbIdentity<>(idTicket));
            addAutoGenerated(new HsqldbIdentity<>(idUser));
        }

        public TicketUserTable() {
            this(null);
        }
    }

    public static class TicketMsgTable extends Table<TicketMsg> {

        public final Column<TicketMsg, Integer> idTicket = addPkColumn(Integer.class, "ticketUserId.idTicket",
                "ID_TICK");
        public final Column<TicketMsg, Integer> idUser = addPkColumn(Integer.class, "ticketUserId.idUser", "ID_USER");
        public final Column<TicketMsg, String> message = addColumn(String.class, "message", "MESSAGE");
        public final Column<TicketMsg, Date> moment = addColumn(Date.class, "date", "MOMENT");

        public TicketMsgTable(String alias) {
            super("TICKET_MSG", alias);
            addAutoGenerated(new HsqldbIdentity<>(idTicket));
            addAutoGenerated(new HsqldbIdentity<>(idUser));
        }

        public TicketMsgTable() {
            this(null);
        }
    }

    public static class StateTransTable extends Table<StateTrans> {

        public final Column<StateTrans, Integer> idTicket = addPkColumn(Integer.class, "ticketUserId.idTicket",
                "ID_TICK");
        public final Column<StateTrans, Integer> idUser = addPkColumn(Integer.class, "ticketUserId.idUser", "ID_USER");
        public final Column<StateTrans, String> state = addColumn(String.class, "state", "STATE");
        public final Column<StateTrans, Date> moment = addColumn(Date.class, "date", "MOMENT");

        public StateTransTable(String alias) {
            super("STATE_TRANS", alias);
            addAutoGenerated(new HsqldbIdentity<>(idTicket));
            addAutoGenerated(new HsqldbIdentity<>(idUser));
        }

        public StateTransTable() {
            this(null);
        }
    }

    // FIXME i adaptar Accessor per a accedir a propietats publiques (sense
    // getter/setters), seria la polla

    public static class Ticket {
        public Integer idTicket;
        public String title;
        public Date created;
    }

    public static class User {
        public Integer idUser;
        public String email;
    }

    public static class TicketUserId {
        public Integer idTicket;
        public Integer idUser;
    }

    public static class TicketUser {
        public TicketUserId ticketUserId;
    }

    public static class TicketMsg {
        public TicketUserId ticketUserId;
        public String message;
        public Date date;
    }

    public static class StateTrans {
        public TicketUserId ticketUserId;
        public ETicketState state;
        public Date date;
    }

    public static enum ETicketState {
        CREAT, EN_CURS, RESOLT, REOBERT
    }

}
