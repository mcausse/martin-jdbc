package org.lenteja.test;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.hsqldb.jdbc.JDBCDataSource;
import org.junit.Before;
import org.junit.Test;
import org.lenteja.jdbc.DataAccesFacade;
import org.lenteja.jdbc.JdbcDataAccesFacade;
import org.lenteja.jdbc.query.IQueryObject;
import org.lenteja.jdbc.script.SqlScriptExecutor;
import org.lenteja.mapper.Aliasable;
import org.lenteja.mapper.Column;
import org.lenteja.mapper.EnumColumnHandler;
import org.lenteja.mapper.Table;
import org.lenteja.mapper.autogen.Generator;
import org.lenteja.mapper.autogen.impl.HsqldbIdentity;
import org.lenteja.mapper.autogen.impl.HsqldbSequence;
import org.lenteja.mapper.collabs.JoinColumn;
import org.lenteja.mapper.collabs.OneToMany;
import org.lenteja.mapper.query.Operations;
import org.lenteja.mapper.query.Query;
import org.lenteja.mapper.query.Relational;

public class CompositionTest {

    final DataAccesFacade facade;

    public CompositionTest() {
        final JDBCDataSource ds = new JDBCDataSource();
        ds.setUrl("jdbc:hsqldb:mem:a");
        ds.setUser("sa");
        ds.setPassword("");
        this.facade = new JdbcDataAccesFacade(ds);
    }

    @Before
    public void before() {
        facade.begin();
        try {
            SqlScriptExecutor sql = new SqlScriptExecutor(facade);
            sql.runFromClasspath("films.sql");
            facade.commit();
        } catch (Exception e) {
            facade.rollback();
            throw e;
        }
    }

    @Test
    public void test() throws Exception {

        facade.begin();
        try {

            GenericDao<Dog, DogTable> dogDao = new GenericDao<>(facade, new DogTable());
            GenericDao<Person, PersonTable> personDao = new GenericDao<>(facade, new PersonTable());

            Person mhc = new Person(new IdPerson(null, "8P"), "mhc", 36, new Date(0L));
            assertEquals(
                    "Person [id=IdPerson [idPerson=null, dni=8P], name=mhc, age=36, birthDate=Thu Jan 01 01:00:00 CET 1970]",
                    mhc.toString());
            personDao.insert(mhc);
            assertEquals(
                    "Person [id=IdPerson [idPerson=10, dni=8P], name=mhc, age=36, birthDate=Thu Jan 01 01:00:00 CET 1970]",
                    mhc.toString());

            Dog chucho = new Dog(null, "chucho", true, ESex.FEMALE, mhc.getId().getIdPerson());
            Dog din = new Dog(null, "din", false, ESex.MALE, mhc.getId().getIdPerson());

            assertEquals("Dog [idDog=null, name=chucho, alive=true, sex=FEMALE, idJefe=10]", chucho.toString());
            assertEquals("Dog [idDog=null, name=din, alive=false, sex=MALE, idJefe=10]", din.toString());
            dogDao.insert(chucho);
            dogDao.insert(din);
            assertEquals("Dog [idDog=100, name=chucho, alive=true, sex=FEMALE, idJefe=10]", chucho.toString());
            assertEquals("Dog [idDog=101, name=din, alive=false, sex=MALE, idJefe=10]", din.toString());

            assertEquals("Dog [idDog=101, name=din, alive=false, sex=MALE, idJefe=10]", //
                    dogDao.query() //
                            .append("select * from {} ", dogDao) //
                            .append("where {}", dogDao.getTable().idDog.eq(101)) //
                            .getExecutor(facade) //
                            .loadUnique() //
                            .toString() //
            );
            assertEquals("201", //
                    dogDao.scalarQuery(dogDao.getTable().idDog) //
                            .append("select sum({}) as {} ", dogDao.getTable().idDog, dogDao.getTable().idDog) //
                            .append("from {} ", dogDao) //
                            .getExecutor(facade) //
                            .loadUnique() //
                            .toString());

            facade.commit();
        } catch (Exception e) {
            facade.rollback();
            throw e;
        }

    }

    // TODO
    public static class GenericDao<E, T extends Table<E>> implements Aliasable {

        final DataAccesFacade facade;
        final T table;

        final Operations o = new Operations();

        public GenericDao(DataAccesFacade facade, T table) {
            super();
            this.facade = facade;
            this.table = table;
        }

        @Override
        public String getAliasedName() {
            return table.getAliasedName();
        }

        public T getTable() {
            return table;
        }

        public void store(E entity) {
            // TODO
        }

        public void insert(E entity) {

            for (Generator<?> ag : table.getAutoGens()) {
                if (ag.isBeforeInsert()) {
                    Object autoGeneratedVal = ag.generate(facade);
                    ag.getColumn().getAccessor().set(entity, autoGeneratedVal);
                }
            }

            IQueryObject q = o.insert(table, entity);
            facade.update(q);

            for (Generator<?> ag : table.getAutoGens()) {
                if (!ag.isBeforeInsert()) {
                    Object autoGeneratedVal = ag.generate(facade);
                    ag.getColumn().getAccessor().set(entity, autoGeneratedVal);
                }
            }
        }

        public void update(E entity) {
            IQueryObject q = o.update(table, entity);
            facade.update(q);
        }

        public void delete(E entity) {
            IQueryObject q = o.delete(table, entity);
            facade.update(q);
        }

        // ===========================================

        public void storeAll(Iterable<E> entities) {
            for (E entity : entities) {
                store(entity);
            }
        }

        public void insertAll(Iterable<E> entities) {
            for (E entity : entities) {
                insert(entity);
            }
        }

        public void updateAll(Iterable<E> entities) {
            for (E entity : entities) {
                update(entity);
            }
        }

        public void deleteAll(Iterable<E> entities) {
            for (E entity : entities) {
                delete(entity);
            }
        }

        // ===========================================

        public Query<E> query() {
            return o.query(table);
        }

        public <C> Query<C> scalarQuery(Column<E, C> column) {
            return o.query(column);
        }

        // ===========================================

        // TODO
        @SuppressWarnings("unchecked")
        public List<E> query(IQueryObject restriction, Order<E>... orders) {
            Query<E> q = o.query(table);
            q.append("select * from {} where {}", table, restriction);
            if (orders.length > 0) {
                q.append(Relational.list(orders));
            }
            return q.getExecutor(facade).load();
        }

        // TODO
        public E queryUnique(IQueryObject restrictions) {
            Query<E> q = o.query(table);
            q.append("select * from {} where {}", table, restrictions);
            return q.getExecutor(facade).loadUnique();
        }

        // TODO query by example
        @SuppressWarnings("unchecked")
        public List<E> query(E example, Order<E>... orders) {
            List<IQueryObject> restrictions = new ArrayList<>();
            for (Column<E, ?> column : table.getColumns()) {
                Column<E, Object> c = (Column<E, Object>) column;
                Object value = c.getAccessor().get(example);
                restrictions.add(c.eq(value));
            }
            return query(Relational.and(restrictions), orders);
        }

        // TODO query by example
        @SuppressWarnings("unchecked")
        public E queryUnique(E example) {
            List<IQueryObject> restrictions = new ArrayList<>();
            for (Column<E, ?> column : table.getColumns()) {
                Column<E, Object> c = (Column<E, Object>) column;
                Object value = c.getAccessor().get(example);
                restrictions.add(c.eq(value));
            }
            return queryUnique(Relational.and(restrictions));
        }
    }

    // TODO
    public static class Order<E> implements IQueryObject {

        final Column<E, ?> column;
        final String order;

        private Order(Column<E, ?> column, String order) {
            super();
            this.column = column;
            this.order = order;
        }

        public static <E> Order<E> asc(Column<E, ?> column) {
            return new Order<>(column, " asc");
        }

        public static <E> Order<E> desc(Column<E, ?> column) {
            return new Order<>(column, " desc");
        }

        @Override
        public String toString() {
            return column + order;
        }

        @Override
        public String getQuery() {
            return toString();
        }

        @Override
        public Object[] getArgs() {
            return new Object[] {};
        }

        @Override
        public List<Object> getArgsList() {
            return Collections.emptyList();
        }
    }

    public static class DogTable extends Table<Dog> {

        public final Column<Dog, Integer> idDog = addPkColumn(Integer.class, "idDog", "id_dog");
        public final Column<Dog, String> name = addColumn(String.class, "name", "name");
        public final Column<Dog, Boolean> alive = addColumn(Boolean.class, "alive", "is_alive");
        public final Column<Dog, ESex> sex = addColumn(ESex.class, "sex", "sex", new EnumColumnHandler<>(ESex.class));
        public final Column<Dog, Long> idJefe = addPkColumn(Long.class, "idJefe", "id_jefe");

        // TODO
        private static final PersonTable personRef = new PersonTable();
        public final OneToMany<Dog, Person> jefe = new OneToMany<>(this, personRef,
                new JoinColumn<>(idJefe, personRef.idPerson));

        public DogTable(String alias) {
            super(Dog.class, "dogs", alias);
            addAutoGenerated(new HsqldbIdentity<>(idDog));
        }

        public DogTable() {
            this(null);
        }
    }

    public static class PersonTable extends Table<Person> {

        public final Column<Person, Long> idPerson = addPkColumn(Long.class, "id.idPerson", "id_person");
        public final Column<Person, String> dni = addColumn(String.class, "id.dni", "dni");
        public final Column<Person, String> name = addColumn(String.class, "name", "name");
        public final Column<Person, Integer> age = addColumn(Integer.class, "age", "age");
        public final Column<Person, Date> birthDate = addColumn(Date.class, "birthDate", "birth_date");

        public PersonTable(String alias) {
            super(Person.class, "persons", alias);
            addAutoGenerated(new HsqldbSequence<>(idPerson, "seq_persons"));
        }

        public PersonTable() {
            this(null);
        }
    }

    public static enum ESex {
        FEMALE, MALE;
    }

    public static class Dog {

        Integer idDog;
        String name;
        boolean alive;
        ESex sex;
        Long idJefe;

        public Dog() {
            super();
        }

        public Dog(Integer idDog, String name, boolean alive, ESex sex, Long idJefe) {
            super();
            this.idDog = idDog;
            this.name = name;
            this.alive = alive;
            this.sex = sex;
            this.idJefe = idJefe;
        }

        public Integer getIdDog() {
            return idDog;
        }

        public void setIdDog(Integer idDog) {
            this.idDog = idDog;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public boolean isAlive() {
            return alive;
        }

        public void setAlive(boolean alive) {
            this.alive = alive;
        }

        public ESex getSex() {
            return sex;
        }

        public void setSex(ESex sex) {
            this.sex = sex;
        }

        public Long getIdJefe() {
            return idJefe;
        }

        public void setIdJefe(Long idJefe) {
            this.idJefe = idJefe;
        }

        @Override
        public String toString() {
            return "Dog [idDog=" + idDog + ", name=" + name + ", alive=" + alive + ", sex=" + sex + ", idJefe=" + idJefe
                    + "]";
        }

    }

    public static class IdPerson {

        Long idPerson;
        String dni;

        public IdPerson() {
            super();
        }

        public IdPerson(Long idPerson, String dni) {
            super();
            this.idPerson = idPerson;
            this.dni = dni;
        }

        public Long getIdPerson() {
            return idPerson;
        }

        public void setIdPerson(Long idPerson) {
            this.idPerson = idPerson;
        }

        public String getDni() {
            return dni;
        }

        public void setDni(String dni) {
            this.dni = dni;
        }

        @Override
        public String toString() {
            return "IdPerson [idPerson=" + idPerson + ", dni=" + dni + "]";
        }

    }

    public static class Person {

        IdPerson id;
        String name;
        int age;
        Date birthDate;

        public Person() {
            super();
        }

        public Person(IdPerson id, String name, int age, Date birthDate) {
            super();
            this.id = id;
            this.name = name;
            this.age = age;
            this.birthDate = birthDate;
        }

        public IdPerson getId() {
            return id;
        }

        public void setId(IdPerson id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getAge() {
            return age;
        }

        public void setAge(int age) {
            this.age = age;
        }

        public Date getBirthDate() {
            return birthDate;
        }

        public void setBirthDate(Date birthDate) {
            this.birthDate = birthDate;
        }

        @Override
        public String toString() {
            return "Person [id=" + id + ", name=" + name + ", age=" + age + ", birthDate=" + birthDate + "]";
        }

    }

}
