package org.lenteja.mapper;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import org.lenteja.jdbc.DataAccesFacade;
import org.lenteja.jdbc.extractor.ResultSetExtractor;
import org.lenteja.jdbc.query.QueryObject;

public class TableGenerator {

    final DataAccesFacade facade;

    public TableGenerator(DataAccesFacade facade) {
        super();
        this.facade = facade;
    }

    public String generate(String entityName, String tableName) {
        final TableMeta meta;

        facade.begin();
        try {
            QueryObject q = new QueryObject("select * from " + tableName);
            meta = facade.extract(q, new MetaTableExtractor(facade, entityName));
        } finally {
            facade.rollback();
        }

        return meta.toString();
    }

    public static class TableMeta {

        final String tableName;
        final String entityName;

        final List<ColumnMeta> columns = new ArrayList<>();

        public TableMeta(String tableName, String entityName) {
            super();
            this.tableName = tableName;
            this.entityName = entityName;
        }

        @Override
        public String toString() {
            StringBuilder s = new StringBuilder();
            s.append("public class " + entityName + "Table extends Table<" + entityName + "> {\n");

            for (ColumnMeta c : columns) {
                s.append("\tpublic final Column<" + entityName + ", " + c.getColumnClassName() + "> "
                        + c.getPropertyName() + " = add" + (c.isPk ? "Pk" : "") + "Column(" + c.getColumnClassName()
                        + ".class, \"" + c.getPropertyName() + "\", \"" + c.getColumnName() + "\");\n");
            }

            s.append("\tpublic " + entityName + "Table() {\n");
            s.append("\t\tsuper(\"" + tableName + "\");\n");
            for (ColumnMeta c : columns) {
                if (c.isPk()) {
                    s.append("\t\taddAutoGenerated(new HsqldbIdentity<>(" + c.getPropertyName() + "));\n");
                }
            }
            s.append("\t}\n");
            s.append("}\n");
            return s.toString();
        }
    }

    public static class ColumnMeta {

        final String columnName;
        final String columnTypeName;
        final String columnClassName;
        final boolean isPk;

        public ColumnMeta(String columnName, String columnTypeName, String columnClassName, boolean isPk) {
            super();
            this.columnName = columnName;
            this.columnTypeName = columnTypeName;
            this.columnClassName = columnClassName;
            this.isPk = isPk;
        }

        public String getColumnName() {
            return columnName;
        }

        public String getColumnTypeName() {
            return columnTypeName;
        }

        public String getColumnClassName() {
            try {
                Class<?> cl = Class.forName(columnClassName);
                return cl.getSimpleName();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        public boolean isPk() {
            return isPk;
        }

        public String getPropertyName() {
            return sqlCaseToCamelCase(columnName);
        }
    }

    public static class MetaTableExtractor implements ResultSetExtractor<TableMeta> {

        final DataAccesFacade facade;
        final String entityName;

        public MetaTableExtractor(DataAccesFacade facade, String entityName) {
            super();
            this.facade = facade;
            this.entityName = entityName;
        }

        @Override
        public TableMeta extract(ResultSet rs) throws SQLException {

            ResultSetMetaData rsmd = rs.getMetaData();
            TableMeta r = new TableMeta(rsmd.getTableName(1), entityName);

            Set<String> pkColumnNames = new LinkedHashSet<>();
            {
                ResultSet rr = facade.getCurrentConnection().getMetaData().getPrimaryKeys(rsmd.getCatalogName(1), null,
                        rsmd.getTableName(1));
                try {
                    while (rr.next()) {
                        pkColumnNames.add(rr.getString("COLUMN_NAME"));
                    }
                } finally {
                    rr.close();
                }
            }

            int cols = rsmd.getColumnCount();
            for (int i = 1; i <= cols; i++) {
                String columnName = rsmd.getColumnName(i);
                ColumnMeta c = new ColumnMeta(columnName, rsmd.getColumnTypeName(i), rsmd.getColumnClassName(i),
                        pkColumnNames.contains(columnName));
                r.columns.add(c);
            }
            return r;
        }

    }

    public static String sqlCaseToCamelCase(final String s) {
        final StringBuilder r = new StringBuilder();

        for (int i = 0; i < s.length(); i++) {
            final char c = s.charAt(i);
            if (c == '_') {
                while (i < s.length() && s.charAt(i) == '_') {
                    i++;
                }
                if (i < s.length()) {
                    r.append(Character.toUpperCase(s.charAt(i)));
                }
            } else {
                r.append(Character.toLowerCase(c));
            }
        }
        return r.toString();
    }

}
